
using namespace std;

class Solution{
public:

    // 病毒传播使用bfs的方式遍历
    int FinalInfected(vector<vector<int>>& graph, vector<int>& initial) {

        int len = graph.size();
        int i = 0, j = 0, cnt = 0;
        queue<int> infected;
        for(i = 0; i<initial.size(); i++)
            if(initial[i]!=-1)  infected.push(initial[i]);
        vector<int> visit(len, 0);
        for(i = 0; i<initial.size(); i++)
            if(initial[i]!=-1)  visit[initial[i]] = 1;

        while(!infected.empty()){
            int x = infected.front();
            cnt++;
            for(i = 0; i<len; i++){
                if(x!=i&&graph[x][i]&&!visit[i])
                {
                    infected.push(i);
                    visit[i] = 1;
 //                   cout<<x<<"---"<<i<<endl;
                }
            }
            infected.pop();
        }
 //       cout<<"we have here?"<<endl;
        return cnt;
    }

    void removeNode(vector<vector<int>>&graph, vector<int> & initial, int node ){
        int i = 0;
        int len = graph.size();
        for(i = 0; i<len; i++)
            graph[i][node] = 0;
        for(i = 0; i<len; i++)
            graph[node][i] = 0;
        for(i = 0; i<initial.size(); i++)
            if(initial[i]==node) initial[i] = -1;
    }

    void printGrap_Init(vector<vector<int>>& graph, vector<int>& initial){
        for(int j = 0; j<graph.size(); j++){
            for(int k = 0; k<graph.size(); k++)
                cout<<graph[j][k]<<' ';
            cout<<'\n';
        }
        for(int j = 0; j<initial.size(); j++)
            cout<<initial[j]<<' ';
        cout<<'\n';
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {

        int min = 3000, res = 0;
        vector<int> removed_num(initial.size(),-1);
//        min = FinalInfected(graph, initial);
        vector<vector<int> > tempGraph(graph);
        vector<int> tempInit(initial);
        for(int i = 0; i<initial.size(); i++){
            tempGraph = graph;
            tempInit = initial;
            removeNode(tempGraph, tempInit, initial[i]);
//          printGrap_Init(tempGraph, tempInit);
            removed_num[i] = FinalInfected(tempGraph, tempInit);
//          cout<<"r_num is "<<removed_num[i]<<endl;
        }

        for(int i = 0; i<removed_num.size(); i++)
            if(removed_num[i]<min||removed_num[i]==min&&initial[i]<res){
                min = removed_num[i];
                res = initial[i];
            }

        return res;
    }

};
